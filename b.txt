import { NativeModules } from 'react-native';
import crypto from 'react-native-crypto';
import { Buffer } from 'buffer';

// Convert text to Uint8Array
const toUint8Array = (str) => new TextEncoder().encode(str);

// 1. Initialization Vector (IV) - 16 bytes
const IV = Uint8Array.from([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);

// 2. PBKDF2 Key Derivation (SecretKeyFactory)
const deriveKey = async (password, salt, iterations, keyLen) => {
  return new Promise((resolve, reject) => {
    crypto.pbkdf2(password, salt, iterations, keyLen / 8, 'sha256', (err, derivedKey) => {
      if (err) reject(err);
      resolve(derivedKey);
    });
  });
};

// 3. Encrypt Data using AES-GCM
const encryptData = async (plainText) => {
  try {
    const password = "H1kUL7JU2ZOGwXP9ghdDdW9C5RF9VQMUA";
    const salt = "z9fe6WhB7WGLyroyNX6PnHSqQT6jZGKeA";
    const iterations = 65536;
    const keyLength = 256;

    // Derive AES Key
    const key = await deriveKey(password, salt, iterations, keyLength);

    // 4. Create AES-GCM Cipher
    const cipher = crypto.createCipheriv('aes-256-gcm', key, IV);
    
    // Encrypt Data
    let encrypted = cipher.update(plainText, 'utf8', 'base64');
    encrypted += cipher.final('base64');

    // Get Authentication Tag (GCM Tag)
    const authTag = cipher.getAuthTag().toString('base64');

    return { encryptedData: encrypted, authTag };
  } catch (error) {
    console.error("Encryption Error:", error);
    return null;
  }
};

// Usage Example
encryptData("4111111111111111") // Example Card Number
  .then(({ encryptedData, authTag }) => {
    console.log("Encrypted Card Number:", encryptedData);
    console.log("Auth Tag:", authTag);
  })
  .catch(console.error);
