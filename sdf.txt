encrypt 



import android.util.Base64
import java.nio.charset.StandardCharsets
import java.security.spec.KeySpec
import javax.crypto.Cipher
import javax.crypto.SecretKey
import javax.crypto.SecretKeyFactory
import javax.crypto.spec.GCMParameterSpec
import javax.crypto.spec.PBEKeySpec
import javax.crypto.spec.SecretKeySpec

object AESGCMEncryption {

    private const val ALGORITHM = "AES/GCM/NoPadding"
    private const val TAG_LENGTH_BIT = 128
    private const val KEY_LENGTH_BIT = 256
    private const val ITERATION_COUNT = 65536

    fun encryptCardData(cardData: String): String? {
        return try {
            // 1. Create initialization vector
            val iv = byteArrayOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)

            // 2. Create a SecretKeyFactory object
            val factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256")

            // 3. Create a Secret Key using specifications
            val password = "H1kUL7JU2ZOGwDP9ghdDdW9C5RF9VQMM"
            val saltString = "z9fe6WhB7WGLyroyND6PnHSqQT6jZGKf"
            val salt = saltString.toByteArray(StandardCharsets.UTF_8)

            val spec: KeySpec = PBEKeySpec(password.toCharArray(), salt, ITERATION_COUNT, KEY_LENGTH_BIT)
            val secretKey: SecretKey = factory.generateSecret(spec)

            // 4. Generate a Secret Key Spec
            val secretKeySpec = SecretKeySpec(secretKey.encoded, "AES")

            // 5. Generate a cryptographic cipher instance
            val cipher = Cipher.getInstance(ALGORITHM)
            val parameterSpec = GCMParameterSpec(TAG_LENGTH_BIT, iv)
            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, parameterSpec)

            // 6. Encrypt the data
            val cardDataBytes = cardData.toByteArray(StandardCharsets.UTF_8)
            val encryptedBytes = cipher.doFinal(cardDataBytes)

            // Base64 encode the result
            Base64.encodeToString(encryptedBytes, Base64.NO_WRAP)

        } catch (e: Exception) {
            e.printStackTrace()
            null
        }
    }

    // Decryption method (optional)
    fun decryptCardData(encryptedData: String): String? {
        return try {
            // 1. Create initialization vector (same as encryption)
            val iv = byteArrayOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)

            // 2. Create a SecretKeyFactory object
            val factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256")

            // 3. Create a Secret Key using specifications (same as encryption)
            val password = "H1kUL7JU2ZOGwDP9ghdDdW9C5RF9VQMM"
            val saltString = "z9fe6WhB7WGLyroyND6PnHSqQT6jZGKf"
            val salt = saltString.toByteArray(StandardCharsets.UTF_8)

            val spec: KeySpec = PBEKeySpec(password.toCharArray(), salt, ITERATION_COUNT, KEY_LENGTH_BIT)
            val secretKey: SecretKey = factory.generateSecret(spec)

            // 4. Generate a Secret Key Spec (same as encryption)
            val secretKeySpec = SecretKeySpec(secretKey.encoded, "AES")

            // 5. Generate a cryptographic cipher instance for decryption
            val cipher = Cipher.getInstance(ALGORITHM)
            val parameterSpec = GCMParameterSpec(TAG_LENGTH_BIT, iv)
            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, parameterSpec)

            // 6. Decrypt the data
            val encryptedBytes = Base64.decode(encryptedData, Base64.NO_WRAP)
            val decryptedBytes = cipher.doFinal(encryptedBytes)

            String(decryptedBytes, StandardCharsets.UTF_8)

        } catch (e: Exception) {
            e.printStackTrace()
            null
        }
    }
}
